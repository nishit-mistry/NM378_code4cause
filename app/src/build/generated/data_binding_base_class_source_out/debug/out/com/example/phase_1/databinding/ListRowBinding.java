// Generated by view binder compiler. Do not edit!
package com.example.phase_1.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.example.phase_1.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListRowBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView itemDate;

  @NonNull
  public final TextView itemDescription;

  @NonNull
  public final TextView itemHumidity;

  @NonNull
  public final TextView itemIcon;

  @NonNull
  public final TextView itemPressure;

  @NonNull
  public final TextView itemTemperature;

  @NonNull
  public final TextView itemWind;

  @NonNull
  public final View lineView;

  private ListRowBinding(@NonNull LinearLayout rootView, @NonNull TextView itemDate,
      @NonNull TextView itemDescription, @NonNull TextView itemHumidity, @NonNull TextView itemIcon,
      @NonNull TextView itemPressure, @NonNull TextView itemTemperature, @NonNull TextView itemWind,
      @NonNull View lineView) {
    this.rootView = rootView;
    this.itemDate = itemDate;
    this.itemDescription = itemDescription;
    this.itemHumidity = itemHumidity;
    this.itemIcon = itemIcon;
    this.itemPressure = itemPressure;
    this.itemTemperature = itemTemperature;
    this.itemWind = itemWind;
    this.lineView = lineView;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListRowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListRowBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_row, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListRowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.itemDate;
      TextView itemDate = rootView.findViewById(id);
      if (itemDate == null) {
        break missingId;
      }

      id = R.id.itemDescription;
      TextView itemDescription = rootView.findViewById(id);
      if (itemDescription == null) {
        break missingId;
      }

      id = R.id.itemHumidity;
      TextView itemHumidity = rootView.findViewById(id);
      if (itemHumidity == null) {
        break missingId;
      }

      id = R.id.itemIcon;
      TextView itemIcon = rootView.findViewById(id);
      if (itemIcon == null) {
        break missingId;
      }

      id = R.id.itemPressure;
      TextView itemPressure = rootView.findViewById(id);
      if (itemPressure == null) {
        break missingId;
      }

      id = R.id.itemTemperature;
      TextView itemTemperature = rootView.findViewById(id);
      if (itemTemperature == null) {
        break missingId;
      }

      id = R.id.itemWind;
      TextView itemWind = rootView.findViewById(id);
      if (itemWind == null) {
        break missingId;
      }

      id = R.id.lineView;
      View lineView = rootView.findViewById(id);
      if (lineView == null) {
        break missingId;
      }

      return new ListRowBinding((LinearLayout) rootView, itemDate, itemDescription, itemHumidity,
          itemIcon, itemPressure, itemTemperature, itemWind, lineView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
