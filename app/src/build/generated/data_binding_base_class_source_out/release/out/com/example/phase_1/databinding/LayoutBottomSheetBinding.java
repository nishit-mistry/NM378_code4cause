// Generated by view binder compiler. Do not edit!
package com.example.phase_1.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.viewbinding.ViewBinding;
import com.example.phase_1.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutBottomSheetBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView api;

  @NonNull
  public final SwitchCompat apiInfoSwitch;

  @NonNull
  public final LinearLayout bottomSheetLayout;

  @NonNull
  public final TextView crop;

  @NonNull
  public final TextView cropInfo;

  @NonNull
  public final TextView detectedItem;

  @NonNull
  public final TextView detectedItem1;

  @NonNull
  public final TextView detectedItem1Value;

  @NonNull
  public final TextView detectedItem2;

  @NonNull
  public final TextView detectedItem2Value;

  @NonNull
  public final TextView detectedItemValue;

  @NonNull
  public final TextView frame;

  @NonNull
  public final TextView frameInfo;

  @NonNull
  public final LinearLayout gestureLayout;

  @NonNull
  public final TextView inference;

  @NonNull
  public final TextView inferenceInfo;

  @NonNull
  public final ImageView minus;

  @NonNull
  public final ImageView plus;

  @NonNull
  public final TextView threads;

  private LayoutBottomSheetBinding(@NonNull LinearLayout rootView, @NonNull TextView api,
      @NonNull SwitchCompat apiInfoSwitch, @NonNull LinearLayout bottomSheetLayout,
      @NonNull TextView crop, @NonNull TextView cropInfo, @NonNull TextView detectedItem,
      @NonNull TextView detectedItem1, @NonNull TextView detectedItem1Value,
      @NonNull TextView detectedItem2, @NonNull TextView detectedItem2Value,
      @NonNull TextView detectedItemValue, @NonNull TextView frame, @NonNull TextView frameInfo,
      @NonNull LinearLayout gestureLayout, @NonNull TextView inference,
      @NonNull TextView inferenceInfo, @NonNull ImageView minus, @NonNull ImageView plus,
      @NonNull TextView threads) {
    this.rootView = rootView;
    this.api = api;
    this.apiInfoSwitch = apiInfoSwitch;
    this.bottomSheetLayout = bottomSheetLayout;
    this.crop = crop;
    this.cropInfo = cropInfo;
    this.detectedItem = detectedItem;
    this.detectedItem1 = detectedItem1;
    this.detectedItem1Value = detectedItem1Value;
    this.detectedItem2 = detectedItem2;
    this.detectedItem2Value = detectedItem2Value;
    this.detectedItemValue = detectedItemValue;
    this.frame = frame;
    this.frameInfo = frameInfo;
    this.gestureLayout = gestureLayout;
    this.inference = inference;
    this.inferenceInfo = inferenceInfo;
    this.minus = minus;
    this.plus = plus;
    this.threads = threads;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutBottomSheetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutBottomSheetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_bottom_sheet, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutBottomSheetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.api;
      TextView api = rootView.findViewById(id);
      if (api == null) {
        break missingId;
      }

      id = R.id.api_info_switch;
      SwitchCompat apiInfoSwitch = rootView.findViewById(id);
      if (apiInfoSwitch == null) {
        break missingId;
      }

      LinearLayout bottomSheetLayout = (LinearLayout) rootView;

      id = R.id.crop;
      TextView crop = rootView.findViewById(id);
      if (crop == null) {
        break missingId;
      }

      id = R.id.crop_info;
      TextView cropInfo = rootView.findViewById(id);
      if (cropInfo == null) {
        break missingId;
      }

      id = R.id.detected_item;
      TextView detectedItem = rootView.findViewById(id);
      if (detectedItem == null) {
        break missingId;
      }

      id = R.id.detected_item1;
      TextView detectedItem1 = rootView.findViewById(id);
      if (detectedItem1 == null) {
        break missingId;
      }

      id = R.id.detected_item1_value;
      TextView detectedItem1Value = rootView.findViewById(id);
      if (detectedItem1Value == null) {
        break missingId;
      }

      id = R.id.detected_item2;
      TextView detectedItem2 = rootView.findViewById(id);
      if (detectedItem2 == null) {
        break missingId;
      }

      id = R.id.detected_item2_value;
      TextView detectedItem2Value = rootView.findViewById(id);
      if (detectedItem2Value == null) {
        break missingId;
      }

      id = R.id.detected_item_value;
      TextView detectedItemValue = rootView.findViewById(id);
      if (detectedItemValue == null) {
        break missingId;
      }

      id = R.id.frame;
      TextView frame = rootView.findViewById(id);
      if (frame == null) {
        break missingId;
      }

      id = R.id.frame_info;
      TextView frameInfo = rootView.findViewById(id);
      if (frameInfo == null) {
        break missingId;
      }

      id = R.id.gesture_layout;
      LinearLayout gestureLayout = rootView.findViewById(id);
      if (gestureLayout == null) {
        break missingId;
      }

      id = R.id.inference;
      TextView inference = rootView.findViewById(id);
      if (inference == null) {
        break missingId;
      }

      id = R.id.inference_info;
      TextView inferenceInfo = rootView.findViewById(id);
      if (inferenceInfo == null) {
        break missingId;
      }

      id = R.id.minus;
      ImageView minus = rootView.findViewById(id);
      if (minus == null) {
        break missingId;
      }

      id = R.id.plus;
      ImageView plus = rootView.findViewById(id);
      if (plus == null) {
        break missingId;
      }

      id = R.id.threads;
      TextView threads = rootView.findViewById(id);
      if (threads == null) {
        break missingId;
      }

      return new LayoutBottomSheetBinding((LinearLayout) rootView, api, apiInfoSwitch,
          bottomSheetLayout, crop, cropInfo, detectedItem, detectedItem1, detectedItem1Value,
          detectedItem2, detectedItem2Value, detectedItemValue, frame, frameInfo, gestureLayout,
          inference, inferenceInfo, minus, plus, threads);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
